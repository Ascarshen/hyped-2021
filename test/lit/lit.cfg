# -*- Python -*-

import os
import distutils.spawn
import platform

import lit.util
import lit.formats

# Configuration file for the 'lit' test runner.

# name: The name of this test suite.
config.name = 'HYPED'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.lit']

# testFormat: The test format to use to interpret tests.
config.test_format = lit.formats.ShTest(execute_external = True)

# test_source_root: The path where tests are located (default is the test suite
# root).
config.test_source_root = None

# test_exec_root: The path where tests are located (default is the test suite
# root).
config.test_exec_root = None

# target_triple:
config.target_triple = 'foo'

hyped_home = os.getenv('ROOT', '')
hyped_bin  = os.path.join(hyped_home, 'hyped')

# Detect available_features:
if os.path.exists(hyped_bin):
  config.available_features.add('hyped-present')


print sys.platform;
print hyped_home;
if sys.platform in ('win32', 'cygwin'):
  config.available_features.add('windows')
else:
  config.available_features.add('not-windows')

if sys.platform.startswith('linux'):
  config.available_features.add('linux')
if sys.platform.startswith('darwin'):
  config.available_features.add('darwin')

# additional substitutions:
config.substitutions.append(('%{hyped}', hyped_bin))

# Pass entire host environment. Modern LIT only passes through a set of
# LLVM-specific environment variables.
config.environment = os.environ

# print informational header:
print ""
print "############################"
print "HYPED : ", hyped_bin
print ""
if not 'hyped-present' in config.available_features:
  print "HYPED binary is not compiled, SKIPPING any tests requiring hyped-present"
print ""
print "Enabled test features: " + ','.join(config.available_features)
print "############################"
print ""
